version: '3.1'
services:
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - tasks-service-net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:Z
    networks:
      - tasks-service-net
    
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    networks:
      - tasks-service-net
  
  api-http:
    build:
      target: api-http
      context: .
      dockerfile: Dockerfile
    container_name: api-http
    restart: always
    ports:
      - 8080:80
    networks:
      - tasks-service-net
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    expose:
      - 80
    command: "/api/wait-for-it.sh postgres:5432 -- /api/http"
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: go-practice

  api-grpc:
    build:
      target: api-grpc
      context: .
      dockerfile: Dockerfile
    container_name: api-grpc
    restart: always
    ports:
      - 8081:8080
    networks:
      - tasks-service-net
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    expose:
      - 8080
    command: "/api/wait-for-it.sh postgres:5432 -- /api/grpc"
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: go-practice

  redis-pubsub:
    build:
      target: redis-pubsub
      context: .
      dockerfile: Dockerfile
    container_name: redis-pubsub
    restart: always
    networks:
      - tasks-service-net
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    command: "/app/redis-ce"

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./docker/pgdata:/var/lib/postgresql/data:Z
    networks:
      - tasks-service-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: go-practice

  jaeger:
    container_name: jaeger
    restart: always
    image: jaegertracing/all-in-one:1.39
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
    networks:
      - tasks-service-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.3
    container_name: kibana
    networks:
      - tasks-service-net
    depends_on:
      - elasticsearch
    restart: always
    mem_limit: 1g
    ports:
      - 5601:5601
    volumes:
      - ./docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    container_name: elasticsearch
    networks:
      - tasks-service-net
    volumes:
      - ./.docker/elasticsearch:/usr/share/elasticsearch/data:Z
      - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    restart: always
    environment:
      cluster.name: es-docker
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
    # mem_limit: 1g
    tty: true
    ports:
      - 9200:9200
      - 9300:9300

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.3
    container_name: logstash
    volumes:
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker/logstash/pipelines:/usr/share/logstash/pipeline:ro,Z
    networks:
      - tasks-service-net
    ports:
      - 5044:5044
    depends_on:
      - elasticsearch
    restart: always
    # mem_limit: 1g
    environment:
      LS_JAVA_OPTS: -Xmx256m -Xms256m

networks:
  tasks-service-net:
    driver: bridge
    name: tasks-service-net
